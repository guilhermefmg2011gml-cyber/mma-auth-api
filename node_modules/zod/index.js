const clone = (value) => {
  if (Array.isArray(value)) return value.map((item) => clone(item));
  if (value && typeof value === 'object') {
    return Object.fromEntries(Object.entries(value).map(([k, v]) => [k, clone(v)]));
  }
  return value;
};

const makeIssue = (path, message) => ({ path, message });

function string() {
  const state = { email: false, min: null, optional: false };
  return {
    _optional: false,
    email() {
      state.email = true;
      return this;
    },
    min(len) {
      state.min = len;
      return this;
    },
    optional() {
      this._optional = true;
      state.optional = true;
      return this;
    },
    _parse(value, path = [], { required = true } = {}) {
      if (value === undefined || value === null) {
        if (!required || state.optional) return { success: true, value: undefined };
        return { success: false, issues: [makeIssue(path, 'Campo obrigatório')] };
      }
      if (typeof value !== 'string') {
        return { success: false, issues: [makeIssue(path, 'Esperado texto')] };
      }
      if (state.min !== null && value.length < state.min) {
        return { success: false, issues: [makeIssue(path, `Mínimo de ${state.min} caracteres`)] };
      }
      if (state.email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(value)) {
          return { success: false, issues: [makeIssue(path, 'E-mail inválido')] };
        }
      }
      return { success: true, value };
    },
  };
}

function boolean() {
  const schema = {
    _optional: false,
    optional() {
      this._optional = true;
      return this;
    },
    _parse(value, path = [], { required = true } = {}) {
      if (value === undefined || value === null) {
        if (!required || this._optional) return { success: true, value: undefined };
        return { success: false, issues: [makeIssue(path, 'Campo obrigatório')] };
      }
      if (typeof value !== 'boolean') {
        return { success: false, issues: [makeIssue(path, 'Esperado booleano')] };
      }
      return { success: true, value };
    },
  };
  return schema;
}

function object(shape = {}) {
  const schema = {
    _shape: shape,
    _default: undefined,
    _optional: false,
    _partial: false,
    default(value) {
      this._default = value;
      return this;
    },
    optional() {
      this._optional = true;
      return this;
    },
    partial() {
      this._partial = true;
      return this;
    },
    _parse(value, path = [], { required = true } = {}) {
      if (value === undefined || value === null) {
        if (this._default !== undefined) {
          return { success: true, value: clone(this._default) };
        }
        if (!required || this._optional || this._partial) {
          return { success: true, value: undefined };
        }
        return { success: false, issues: [makeIssue(path, 'Campo obrigatório')] };
      }
      if (typeof value !== 'object' || Array.isArray(value)) {
        return { success: false, issues: [makeIssue(path, 'Esperado objeto')] };
      }
      const issues = [];
      const result = {};
      for (const [key, field] of Object.entries(this._shape)) {
        const hasKey = Object.prototype.hasOwnProperty.call(value, key);
        const childValue = hasKey ? value[key] : undefined;
        const childRequired = !this._partial && !field._optional;
        const parsed = field._parse(childValue, [...path, key], { required: childRequired });
        if (!parsed.success) {
          issues.push(...parsed.issues);
        } else if (parsed.value !== undefined || hasKey) {
          result[key] = parsed.value;
        }
      }
      if (issues.length) {
        return { success: false, issues };
      }
      return { success: true, value: result };
    },
    safeParse(value) {
      const parsed = this._parse(value, [], { required: !this._optional });
      if (!parsed.success) {
        return { success: false, error: { issues: parsed.issues } };
      }
      if (parsed.value === undefined && this._default !== undefined) {
        return { success: true, data: clone(this._default) };
      }
      return { success: true, data: parsed.value };
    },
  };
  return schema;
}

export const z = {
  string,
  boolean,
  object,
};

export default { z };